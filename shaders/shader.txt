varying vec3 f_pos;
varying vec3 plAdd;
varying vec3 light_dir;
varying vec4 ShadowCoord;

#ifdef VERTEX
	attribute vec3 VertexNormal;
	attribute vec3 localPos;
	
	struct PointLight {    
		vec3 position;
		
		float constant;
		float linear;
		float quadratic;  

		vec3 ambient;
		vec3 diffuse;
		vec3 specular;
		
		float intensity;
	};
	
	uniform int maxpointlights;
	uniform PointLight pointlights[32];
	
	uniform vec3 u_light_direction;

	uniform mat4 u_view, u_model, u_projection;
	uniform mat4 depthBiasMVP;
	
	vec3 CalcPointLight(PointLight light, vec3 normal, vec3 vpos) {
		vec3 ld = normalize(light.position - vpos); //Light direction
		vec3 ldv = normalize(-reflect(ld,normal)); //Light direction reflected
		float diff = max(dot(normal, u_light_direction), 0.0); //Diffuse shading
		//vec3 viewDirN = normalize(viewDir);
		
		float distance = length(light.position - vpos); //Distance
		float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); //Attenuation
		//float spec = max(dot(ldv,viewDirN),0.0); //Specular based on viewDir

		vec3 amb = light.ambient;    
		vec3 diffuse = light.diffuse * diff;
		//vec3 specc = light.specular * spec;
		
		diffuse *= attenuation;
		amb *= attenuation;
		//specc *= attenuation;
		
		//return (amb + diffuse + specc);
		return ((amb + diffuse) * light.intensity);
	}

	vec4 position(mat4 mvp, vec4 v_position) {
		//ShadowCoord = depthBiasMVP * v_position;
		plAdd = vec3(0.0);
		vec3 vNn = normalize(VertexNormal);
		vec4 vpos = u_model * v_position;
		for(int i = 0; i < maxpointlights; i++) {
			plAdd += CalcPointLight(pointlights[i], vNn, vpos.xyz); //Function to calculate pointlight influence
		}
		plAdd = min(max(plAdd,0.0),1.0);
		f_pos = localPos;
		return u_projection * u_view * u_model * v_position;
	}
#endif

#ifdef PIXEL
	
	vec4 effect(vec4 color, Image texture, vec2 texture_coords, vec2 screen_coords) {		
		vec4 ambient = vec4(0.1,0.1,0.1,0.0);
		
		vec3 light = normalize(light_dir);
		
		float l_in = dot(normalize(f_pos),light);
		
		vec4 out_color = vec4(l_in,l_in,l_in,1);
		
		out_color += ambient;
		out_color += vec4(plAdd,1.0);
		out_color *= color;
		out_color.a = 1.0;

		//return out_color;
		
		return vec4(vec3(l_in),1);
		
		//return vec4(normalize(f_pos),1);
	}
#endif